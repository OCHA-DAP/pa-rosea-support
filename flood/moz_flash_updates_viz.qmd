---
title: "Mozambique Flash Updates - Flooding"
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    self-contained: true
    embed-resoures: true
    smooth-scroll: true
execute:
  include: false
  echo: false
  warning: false
  message: false
  eval: false
  results: "asis"
  out.width: "100%"
  code-fold: true
editor: visual
project:
     execute-dir: project
---

## Quarto


```{r}
#| eval: true

library(googledrive )
library(here)
library(terra)
library(sf)
library(tidyverse)
library(janitor)
library(tidyterra)
library(gghdx)
library(glue)
library(targets)
library(exactextractr)
library(gt)


tar_load(lgdf_adm,store=here("flood_target_store"))

gghdx()
source(
  here(file.path("R","googledrive.R"))
)

drive_auth(
  path=here(Sys.getenv("FS_SA_JSON"))
)

drive_dribble <- drive_ls(
  corpus = "user"
)

dl_log <- load_drive_file(drive_dribble,"FloodScan_zip_DL_log.csv")

df_latest_files_meta <- dl_log %>% 
  filter(download_date==max(download_date))


lr <- set_names(df_latest_files_meta$file_name,str_extract(df_latest_files_meta$file_name,"sfed|mfed")) %>% 
  imap(
    \(tmp_file_name,nm){
      cat("downloading zips\n")
      tmp_fp <- download_drive_zips(dribble = drive_dribble,tmp_file_name,overwrite=T) 
      cat("zip saved as ", tmp_fp,"\n")
      
      tmp_zip_contents <- unzip(zipfile = tmp_fp,list = T) %>% 
        tibble()
      
      cat("making meta data catalogue\n")
      latest_10_days_meta <- tmp_zip_contents %>% 
        clean_names() %>% 
        filter(
          str_detect(name, ".tif$")
        ) %>% 
        mutate(
          date = as_date(stringr::str_extract(name , "\\d{8}"),"%Y%M%D")
        ) %>% 
        slice_max(order_by = date, n = 10)
      
      cat("unzipping last 10\n")
      unzip(zipfile = tmp_fp,
            files = latest_10_days_meta$name,
            exdir = dirtmp <- tempdir(),
      )
      
      
      fps_tifs_last_10 <- list.files(
        file.path(
          dirtmp,
          glue("aer_floodscan_{nm}_area_flooded_fraction_africa_90days")
        ),
        full.names = T
      )
      cat("reading raster\n")
      r <- rast(fps_tifs_last_10)
      lyr_names <- basename(fps_tifs_last_10)
      lyr_date_names <- as_date(stringr::str_extract(lyr_names , "\\d{8}"),"%Y%M%D")
      set.names(r, lyr_date_names)
      # unlink(dirtmp,recursive=T)
      return(r)
    }
  )




lgdf_moz <- lgdf_adm %>% 
  map(
    ~.x %>% 
      filter(adm0_en =="Mozambique")
  )
df_bbox <-  st_bbox(lgdf_moz$adm0)



# remove all < 2% flood frac right off batt
lr_bounded <- lr %>% 
  map(
    \(rtmp){
      rtmp_copy <- deepcopy(rtmp)
      r_tmp_cropped<- crop(rtmp_copy, lgdf_moz$adm0)
      r_tmp_cropped[r_tmp_cropped<0.02]<-NA
      return(r_tmp_cropped)
    }
  )

rivers_gpkg <-  file.path(
  Sys.getenv("AA_DATA_DIR"),
  "public",
  "raw",
  "moz",
  "waterways",
  "hotosm_moz_named_rivers_lines_geojson.gpkg"
)
rivers<- st_read(rivers_gpkg,
                 "hotosm_moz_rivers_lines_geojson__hotosm_moz_waterways_lines_geojsongeojson")


gdf_esa<- st_read(file.path(
  Sys.getenv("AA_DATA_DIR"),
  "public",
  "raw",
  "esa",
  "cod_ab",
  "esa_admin_region"
)) %>% 
  clean_names()


gdf_surround <- gdf_esa %>% 
  filter(
    country %in% c("Zimbabwe",
                   "Zambia",
                   "Malawi","Tanzania","South Africa","Swazilnd")
  ) %>% 
  st_make_valid() #%>% 

```


```{r calcExposureRaster}
#| eval: true

# download wrold pop
countries_dl_wp <- c(Mozambique="MOZ")
r_wp <- map(countries_dl_wp,\(country_code){
  cat("downloading ",country_code,"\n")
  country_code_lower <- str_to_lower(country_code)
  url <- glue("https://data.worldpop.org/GIS/Population/Global_2000_2020_1km_UNadj/2020/{country_code}/{country_code_lower}_ppp_2020_1km_Aggregated_UNadj.tif")
  terra::rast(url)}
)

# first lets do max flood fraction over time period
lr_fs_max <- lr_bounded %>% 
  map(
    \(rtmp){
      r_tmp_copy <- deepcopy(rtmp)  
      r_max_composite <- max(r_tmp_copy)
      return(r_max_composite)
    }
  )



threshold = 0.2
lr_exposure_max <- lr_fs_max %>% 
  map(
    \(rtmp){
      cat("cropping\n")
      r_max_composite <- deepcopy(rtmp)
      r_fs_tmp <- crop(r_max_composite, r_wp$Mozambique)
      ext(r_fs_tmp) <- ext( r_wp$Mozambique)
      
      cat("resampling floodscan to worldpop\n")
      r_fs_resampled <- terra::resample(x = r_fs_tmp,r_wp$Mozambique,method="near")
      cat("binarizing floodscan\n")
      lgl_thresh_mask <- ifel(r_fs_resampled>=threshold,1,0) 
      r_fs_resampled_masked <- mask(r_fs_resampled,lgl_thresh_mask)
   
      cat("multiplying floodscan by worldpop for pop exposure\n")
      r_exposure <- r_fs_resampled_masked*r_wp$Mozambique
      
      return(r_exposure)
      
    }
  )


# Daily
# remember this is masked already . .... remember to think about

#flood frac thresh

lr_exposure_daily <- lr_bounded %>% 
  map(
    \(rtmp){
      cat("cropping\n")
      rtmp_copy <- deepcopy(rtmp)
      r_fs_tmp <- crop(rtmp_copy, r_wp$Mozambique)
      ext(r_fs_tmp) <- ext( r_wp$Mozambique)
      
      cat("resampling floodscan to worldpop\n")
      r_fs_resampled <- terra::resample(x = r_fs_tmp,r_wp$Mozambique,method="near")
      cat("binarizing floodscan\n")
      
      lgl_thresh_mask <- ifel(r_fs_resampled>=threshold,1,0) 
      r_fs_resampled_masked <- mask(r_fs_resampled,lgl_thresh_mask)
   
      
      
      cat("multiplying floodscan by worldpop for pop exposure\n")
      r_exposure <- r_fs_resampled_masked*r_wp$Mozambique
      
      return(r_exposure)
      
    }
  )

# max composites

```


```{r calcExposureVector}
#| eval: true
# Zonal Stats ###
# exact_extract(lr_exposure$sfed,y = lgdf_moz$adm1)
df_adm2_exposure_daily <- lr_exposure_daily %>% 
  map(
    \(rtmp){
      rtmp_copy <- deepcopy(rtmp)
      exact_extract(x = rtmp_copy,
                    y = lgdf_moz$adm2,
                    fun ="sum",
                    append_cols= c("adm0_en","adm1_pcode","adm1_en","adm2_en","adm2_pcode"),
                    force_df = TRUE
      ) %>%
        pivot_longer(cols = starts_with("sum"),
                     names_to = "sum_date",
                     values_to = "pop_exposed") %>%
        separate(col = sum_date, "\\.",into = c("stat","date")) %>%
        mutate(
          date= as_date(date)
        )
      
    }
  )
lr_exposure_daily$mfed
lr_exposure_max$mfed
df_adm2_exposure_max <- lr_exposure_max %>% 
  map(
    \(rtmp){
      rtmp_copy <-  deepcopy(rtmp)
      exact_extract(x = rtmp_copy,
                    y = lgdf_moz$adm2,
                    fun ="sum",
                    append_cols= c("adm0_en","adm1_pcode","adm1_en","adm2_en","adm2_pcode"),
                    force_df = TRUE
      ) %>%
        pivot_longer(cols = starts_with("sum"),
                     names_to = "sum_date",
                     values_to = "pop_exposed") %>%
        separate(col = sum_date, "\\.",into = c("stat","date")) %>%
        mutate(
          date= as_date(date)
        )
      
    }
  )
```

## Top line Figures
```{r eval=T}
#| eval: true
#| include: true
#| results: 'asis'

df_adm2_max_pop <- df_adm2_exposure_max %>% 
  imap(
    \(dft,nm){
      dft %>% 
        select(-date) %>% 
        mutate(
          data_source= toupper(nm)
        )
      
    }
  ) %>% 
  list_rbind()

subtitle_date_ramge <- glue_collapse(format(as_date(unique(df_adm2_exposure_daily$sfed$date)) %>% range(),"%e-%b")," to ")

df_adm2_max_pop_processed <- df_adm2_max_pop %>% 
  group_by(
    across(
      matches("adm\\d")
    )
  ) %>% 
  filter(
    any(pop_exposed>0)
  ) %>% 
  ungroup() 

df_adm2_max_pop_processed %>% 
  ggplot(
    aes(x= reorder(adm2_en,pop_exposed), y= pop_exposed, fill=data_source,color = data_source)
  )+
  geom_bar(alpha=0.4,stat="identity",position="dodge")+
  scale_y_continuous(labels = scales::label_comma())+
  coord_flip()+
  labs(
    title = "Mozambique: Potential Population Exposed to Flooding By District",
    subtitle = glue("Last 10 days ({subtitle_date_ramge})"),
    caption = "Estimates calculated using FloodScan (SFED & MFED) and WorldPop 2020 UN adjusted raster in the following steps: 
    1. a maximum flood fraction raster was calculated over the previous 10 days
    2. This maximum flood fraction raster was thresholded to only include fraction ≥ 20%
    3. The flood fraction raster was multiplied by the WorldPop raster to obtain an estimated maximum exposure ra
    4. Weighted zonal sum calclulated at the admin 2 level to obtain approximte population potentially exposed to flooding the past 10 days"
  )+
  theme(
    axis.title = element_blank(),
    legend.title = element_blank(),
    plot.caption = element_text(hjust=0)
  )

```

```{r}
#| eval: true
#| include: true
#| results: 'asis'

df_adm2_max_pop_processed %>% 
  # bind_rows(df_adm2_max_pop_avg) %>% 
  pivot_wider(names_from = data_source, values_from = pop_exposed) %>% 
  rowwise() %>% 
  mutate(
    Average = mean(c(SFED,MFED))
  ) %>% 
  ungroup() %>% 
  arrange(desc(Average)) %>% 
  
  gt() %>% 
  cols_hide(
    columns = c(matches("_pcode$"),"stat","adm0_en")
  ) %>% 
  cols_label(
    adm0_en="Country",
    adm1_en="Region",
    adm2_en="District"
  ) %>% 
  fmt_number(columns = c("SFED","MFED","Average"),decimals = 0) %>% 
  tab_header(
    title = "Mozambique: Potential Population Exposed to Flooding By District",
    subtitle = glue("Last 10 days ({subtitle_date_ramge})"),
  ) %>% 
  tab_footnote(footnote = 
                 html(
                   "Estimates calculated using FloodScan (SFED & MFED) and WorldPop 2020 UN adjusted raster in the following steps:<br> 
    1. a maximum flood fraction raster was calculated over the previous 10 days<br>
    2. This maximum flood fraction raster was thresholded to only include fraction ≥ 20%<br>
    3. The flood fraction raster was multiplied by the WorldPop raster to obtain an estimated maximum exposure raster<br>
    4. Weighted zonal sum calclulated at the admin 2 level to obtain approximte population potentially exposed to flooding the past 10 days"
                 )
  )
```


## Time Series


SFED & MFED shaded range

```{r timeSeriesBoth}
#| eval: true
#| include: true
#| results: "asis"
#| fig-height: 10
#| out-height: 10in
#| column: screen
#| out.width: 75%

  # select only adm2s that had some flood exposure for plotting
  df_adm2_exposed_daily_processed_sfed_mfed <- df_adm2_exposure_daily %>% 
  imap(
    \(dft,nm){
      dft %>% 
        group_by(
          across(matches("adm\\d"))
        ) %>% 
        filter(
          any(pop_exposed!=0)
        ) %>% 
        mutate(
          
          data_source = toupper(nm)
        ) %>% 
        ungroup()
      
    }
  ) %>% 
  list_rbind()

# df_adm2_exposed_daily_processed_sfed_mfed %>% 
#   filter(pop_exposed!=0) %>% 
#   group_by(adm1_en) %>% 
#   distinct(adm2_pcode) %>% 
#   count()



# annoyingly there will be too many admins for having 1 color per adm2
# can't make a legend with 30 colors

# therefore we split the plots by admin1 give each plot it's own legend
adm1_w_exposure <- df_adm2_exposed_daily_processed_sfed_mfed$adm1_en %>% 
  unique()

# requires patchwork and some fangling like this to only put dates
# on bottom plot
bottom_plot <- adm1_w_exposure[length(adm1_w_exposure)]


l_ps <-adm1_w_exposure %>% 
  map(
    \(adm1_tmp){
      # print(adm1_tmp)
      # adm1_tmp <-  "Niassa"
      # adm1_tmp<-"Zambezia"
      df_tmp <- df_adm2_exposed_daily_processed_sfed_mfed %>% 
        filter(
          adm1_en == adm1_tmp
        ) %>%
        group_by(
          across(matches("adm\\d")),date
        ) %>% 
        summarise(
          min_pop = min(pop_exposed),
          max_pop = max(pop_exposed),
          mean_pop = mean(pop_exposed)
        ) 
      num_adm2s <- length(unique(df_tmp$adm2_en))
      num_legend_cols <- case_when(
        num_adm2s>=14~3,
        num_adm2s>=7~2,
        .default=1)
        

      p <- df_tmp %>% 
        ggplot(
          aes(x= date, y= mean_pop, group=adm2_en, color=adm2_en, fill =adm2_en)
        )+
        # geom_line()+
        geom_ribbon(aes(ymin= min_pop,ymax=max_pop),alpha= 0.3)+
        geom_point(alpha=0.8)+
        # scale_color_brewer(type = "qual",palette = "Accent")+
        scale_color_manual(values = tmaptools::get_brewer_pal("Accent", n = 21,plot=F))+
        scale_fill_manual(values = tmaptools::get_brewer_pal("Accent", n = 21,plot=F))+
        # scale_fill_brewer(type="qual",palette="Accent")+
        labs(
          subtitle = adm1_tmp
        )+
        scale_x_date(
          date_breaks = "day",date_labels = "%e-%b"
        )+
        scale_y_continuous(
          labels = scales::label_comma()
        )+
        guides(colour=guide_legend(ncol=num_legend_cols))+
        theme(
          legend.title = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          axis.text.x = element_blank(),
          legend.text = element_text(size=8),
          legend.spacing =unit(0, 'cm'),
          legend.key.height = unit(0.2,'cm'),
          legend.position = "right"
        )
      if(adm1_tmp==bottom_plot){
        p <- p+
          labs(
            caption = "Estimates calculated using FloodScan (SFED) and WorldPop 2020 UN adjusted raster in the following steps: 
    1. Each daily FloodScan raster was thresholded to only include fraction ≥ 20%
    2. Each thresholded raster was multipled by the WorldPop raster to obtain approximate potential daily exposure rasters
    4. Weighted zonal sum calclulated at the admin 2 level to obtain approximte population potentially exposed to flooding during each of the last 10 days"
          )+
          theme(
            plot.caption =element_text(hjust=0),
            axis.text.x = element_text(angle=90),
          )
      }
      return(p)
    }
    
  )


patchwork::wrap_plots(l_ps,ncol = 1)+
  patchwork::plot_annotation(
    title= "Mozambique: population potentially exposed to flooding",
    subtitle = "FloodScan (MFED & SFED range) + WorldPop",
  )

```


```{r timeSeriesSFED}
#| eval: false
#| include: false



# select only adm2s that had some flood exposure for plotting
df_adm2_exposed_daily_processed <- df_adm2_exposure_daily$sfed %>% 
  group_by(
    across(matches("adm\\d"))
  ) %>% 
  filter(
    any(pop_exposed!=0)
  ) %>% 
  mutate(
    # was thinking could use this if we were going to put all 
    # on 1 plot to classify admins with greatest increase/decrease
    # NOT used yet
    diff = max(pop_exposed)- min(pop_exposed)
  ) %>% 
  ungroup()


# annoyingly there will be too many admins for having 1 color per adm2
# can't make a legend with 30 colors

# therefore we split the plots by admin1 give each plot it's own legend
adm1_w_exposure <- df_adm2_exposed_daily_processed$adm1_en %>% 
  unique()

# requires patchwork and some fangling like this to only put dates
# on bottom plot
bottom_plot <- adm1_w_exposure[length(adm1_w_exposure)]

l_ps <-adm1_w_exposure %>% 
  map(
    \(adm1_tmp){
      p <-  df_adm2_exposed_daily_processed %>% 
        filter(
          adm1_en == adm1_tmp
        ) %>%
        ggplot(
          aes(x= date,
              y= pop_exposed, 
              group = adm2_en,
              color= adm2_en)
        )+
        geom_point()+
        geom_line()+
        scale_color_brewer(type = "qual")+
        labs(
          subtitle = adm1_tmp
        )+
        scale_x_date(
          date_breaks = "day",date_labels = "%e-%b"
        )+
        scale_y_continuous(
          labels = scales::label_comma()
        )+
        theme(
          legend.title = element_blank(),
          axis.title.x = element_blank(),
          axis.title.y = element_blank(),
          axis.text.x = element_blank(),
          legend.text = element_text(size=8),
          legend.spacing =unit(0, 'cm'),
          legend.key.height = unit(0.2,'cm'),
          legend.position = "right"
        )
      if(adm1_tmp==bottom_plot){
        p <- p+
          labs(
            caption = "Estimates calculated using FloodScan (SFED) and WorldPop 2020 UN adjusted raster in the following steps: 
    1. Each daily FloodScan raster was thresholded to only include fraction ≥ 20%
    2. Each thresholded raster was multipled by the WorldPop raster to obtain approximate potential daily exposure rasters
    4. Weighted zonal sum calclulated at the admin 2 level to obtain approximte population potentially exposed to flooding during each of the last 10 days")+
          
          theme(
            plot.caption =element_text(hjust=0),
            axis.text.x = element_text(angle=90),
          )
      }
      return(p)
    }
    
  )

patchwork::wrap_plots(l_ps,ncol = 1)+
  patchwork::plot_annotation(
    title= "Mozambique: population potentially exposed to flooding",
    subtitle = "FloodScan SFED + WorldPop",
    
  )

```

## Appendix

## Map Flood Fraction
```{r mapFloodFrac10d}
#| eval: true
#| include: true
#| results: "asis"
#| fig-height: 10
#| out-height: 10in

low_fill = "#E0F3F8"
med_fill ="#74ADD1" 
high_fill= "#4575B4"

lgdf_moz$adm0 %>% object.size()
adm0_simp<- st_simplify(lgdf_moz$adm0,20000)
adm1_simp<- st_simplify(lgdf_moz$adm1,20000)
adm0_simp %>% 
  object.size()
adm1_simp %>% 
  object.size()

ggplot()+
  geom_sf(data= adm0_simp,fill="white", linewidth=0.8)+
  geom_sf(data= adm1_simp,fill=NA,linewidth=0.5,color="grey")+
  geom_spatraster(data = lr_bounded$sfed)+
  scale_fill_steps2(
    breaks = seq(0,1,by=0.2),
    low = low_fill,
    mid = med_fill,
    high = high_fill,
    midpoint = 0.5,
    space = "Lab",
    na.value = NA,
    guide = "coloursteps",
    aesthetics = "fill",
    name= "Flooded\nFraction",labels=scales::label_percent()
  )+
  facet_wrap(~lyr)+
  geom_sf(
    data= gdf_surround, 
    fill="grey",alpha=0.8, color = "white"  )+
  coord_sf(xlim=df_bbox[c(1,3)],ylim=df_bbox[c(2,4)])+
  labs(title = "Mozambique Daily Flood Fraction (SFED)",
       subtitle = "Last 10 days")+
  theme(
    legend.text = element_text(angle=90)
  )
# ggsave("map_moz_SFED_flood_frac_last_10_days.png",height = 15,width = 10)
```

# Max Flood Fraction

```{r}
ggplot()+
  geom_sf(data= adm0_simp,fill="white", linewidth=0.8)+
  geom_sf(data= adm1_simp,fill=NA,linewidth=0.5,color="grey")+
  geom_sf(
    data= rivers,
    color="lightblue",lwd=0.1#,alpha=0.4
  )+
  geom_spatraster(data = max(lr_bounded$sfed))+
  scale_fill_steps2(
    breaks = seq(0,1,by=0.2),
    low = low_fill,
    mid = med_fill,
    high = high_fill,
    midpoint = 0.3,
    space = "Lab",
    na.value = NA,
    guide = "coloursteps",
    aesthetics = "fill",
    name= "Flooded\nFraction",labels=scales::label_percent()
  )+
  geom_sf(
    data= gdf_surround, 
    fill="grey",alpha=0.8, color = "white"  )+
  
  coord_sf(xlim=df_bbox[c(1,3)],ylim=df_bbox[c(2,4)])+
  labs(title = "Mozambique Daily Flood Fraction (SFED)",
       subtitle = "Last 10 days")+
  theme(
    legend.text = element_text(angle=90)
  )

ggsave("moz_sfed_max_flood_frac.png")
```


## Map Exposure
```{r}
# Map Flood Exposure

lr_exposure$sfed %>% 
  values() %>% 
  data.frame() %>% 
  pivot_longer(cols = everything()) %>% 
  filter(!is.na(value)) %>% 
  ggplot(
    aes(x= value)
  )+
  geom_histogram()

ggplot()+
  geom_sf(data= adm0_simp,fill="white", linewidth=0.8)+
  geom_sf(data= adm1_simp,fill=NA,linewidth=0.5,color="grey")+
  geom_spatraster(data = lr_exposure$sfed)+
  scale_fill_steps2(
    breaks = c(10,50,100,150,500),
    low = "yellow",
    mid = "orange",
    high = "red",
    midpoint = 20,
    space = "Lab",
    na.value = NA,
    guide = "coloursteps",
    aesthetics = "fill",
    name= "Flooded\nFraction",labels=scales::label_comma()
  )+
  facet_wrap(~lyr)+
  geom_sf(
    data= gdf_surround, 
    fill="grey",alpha=0.8, color = "white"  )+
  coord_sf(xlim=df_bbox[c(1,3)],ylim=df_bbox[c(2,4)])+
  labs(title = "Mozambique Daily Flood Fraction (SFED)",
       subtitle = "Last 10 days")+
  theme(
    legend.text = element_text(angle=90)
  )
ggsave("map_moz_SFED_flood_exposure_last_10_days.png",height = 15,width = 10)
```


## Max Flood Exposure
```{r}
lr_max_exposure <-  lr_exposure %>% 
  map(
    ~max(.x) 
  )

max_sfed_clipped<- mask(
  lr_max_exposure$sfed,
  adm0_simp
)

lr_max_exposure$sfed %>% 
  values() %>% 
  data.frame() %>% 
  pivot_longer(cols = everything()) %>% 
  filter(!is.na(value)) %>% 
  ggplot(
    aes(x= value)
  )+
  geom_histogram()

max_sfed_clipped %>% 
  values() %>% 
  data.frame() %>% 
  pivot_longer(cols = everything()) %>% 
  filter(!is.na(value)) %>% 
  ggplot(
    aes(x= value)
  )+
  geom_histogram()

# terra::writeRaster(max_sfed_clipped,"test.tif")

ggplot()+
  geom_sf(data= adm0_simp,fill="white", linewidth=0.3)+
  geom_sf(data= adm1_simp,fill=NA,linewidth=0.5,color="grey")+
  geom_spatraster(data = lr_max_exposure$sfed) +
  
  # scale_fill_brewer(type = "seq")
  scale_fill_steps2(
    breaks = c(0,10,20,50,100,200),
    low = "yellow",
    mid = "orange",
    high = "red",
    midpoint = 20,
    # trans = scales::transform_pseudo_log(),
    space = "Lab",
    na.value = NA,
    guide = "coloursteps",
    aesthetics = "fill",
    name= "Flooded\nExposure",labels=scales::label_comma()
  )+
  # geom_sf(
  #   data= gdf_surround, 
  #   fill="grey",alpha=0.8, color = "white"  )+
  coord_sf(xlim=df_bbox[c(1,3)],ylim=df_bbox[c(2,4)])+
  labs(title = "Mozambique Maximum Potential Flood Exposure",
       subtitle = "Last 10 days")+
  theme(
    legend.text = element_text(angle=90)
  )
ggsave("moz_sfed_max_flood_exposure.png")



ggplot()+
  geom_sf(data= adm0_simp,fill="white", linewidth=0.8)+
  geom_sf(data= adm1_simp,fill=NA,linewidth=0.5,color="grey")+
  geom_spatraster(data = lr_max_exposure$sfed)+
  geom_sf(
    data= gdf_surround, 
    fill="grey",alpha=0.8, color = "white"  )+
  coord_sf(xlim=df_bbox[c(1,3)],ylim=df_bbox[c(2,4)])+
  labs(title = "Mozambique Daily Flood Fraction (SFED)",
       subtitle = "Last 10 days")+
  theme(
    legend.text = element_text(angle=90)
  )
```

